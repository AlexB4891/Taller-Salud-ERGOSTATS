---
title: "Taller Salud ERGOSTATS"
author: "Pablo Sarango"
format: html
editor: visual
execute:
  eval: false
---

# Sección 1: Crear las zonas de influencia o captación

::: callout-note
# Objetivos de esta sección

1.  Obtener los centroides para cada una de las zonas censales (unidades geográficas).

2.  Crear las isócronas para cada zona censal con zonas de influencia de 0-10 min y de 10-20 min.
:::

## Cargar librerías y datos

```{r}

# Cargar Librerias
if (!require("pacman")) {
  install.packages("pacman")
  library(pacman)
} 

pacman::p_load(
  sf,           # Manipulación de datos espaciales
  tidyverse,    # Manipulación de datos 
  leaflet,      # Crear mapas interactivos
  profvis,
  hereR,        # Paquete para acceder a la API HERE 
  osmdata,
  sp
)

# Importar datos
ruta <- "../data/gpkg/base_map_dmq.gpkg"
mapa_base_dmq <- st_read(ruta,
                         layer = "dmq")

```

## Transformacion de los datos

```{r}

# Crear una poblacion aleatoria para cada zona censal
set.seed(123)

mapa_base_dmq <- mapa_base_dmq %>% 
  mutate(poblacion = sample(1000:10000, 
                            n(), 
                            replace = TRUE))

# Obtener los centroides de cada zona censal
centroides_dmq <- st_centroid(mapa_base_dmq) %>% 
  # Transformar de UTM a Geograficas 
  st_transform(4326)

# Visualizar los centroides
leaflet() %>% 
  # Añadir mapa base 
  addProviderTiles("CartoDB.Positron", 
                   group="Greyscale") %>% 
  
  # Añadir los centroides
  addCircleMarkers(data = centroides_dmq)
  
```

## Crear Isocronas

### Crear un solo conjunto de isocronas

```{r}

# Configurar la llave de HERE
# here_key <- ""
# set_key(here_key)

# Crear isocronas
iso <- isoline(
  # Punto(s) desde donde parte la isocrona. Debe ser un objeto sf
  poi = centroides_dmq[1,],
  
  # Vector que contiene los intervalos de corte en segundos (10 y 20 min) 
  range = c(10,20)*60,
  
  # Indica el tipo de rango: tiempo, distancia o energia 
  range_type = "time",
  
  # Fecha y tiempo del calculo para simular trafico en tiempo real 
  datetime = as.POSIXct(paste0(Sys.Date(), " 10:00"))
  
) %>%
  # Le asignamos una columna nueva para identificar cada nivel de las isocronas
  mutate(name = paste0((range - 600) / 60," to ", range / 60, " mins")) 

# Transformar el objeto sf a SpatialPolygonDataFrame para visualizarlo con leaflet
iso_vis <- as(iso, "Spatial")

# Visualizar las isocronas
leaflet() %>% 
  # Añadir mapa base 
  addProviderTiles("CartoDB.Positron", 
                   group="Greyscale") %>% 
  
  # Añadir las isocronas
  addPolygons(data = iso)

```

### Crear isocronas por cada centroide

```{r}

# Crear una carpeta para guardar los shapefiles de las isocronas
dir.create("../data/shp/isocronas/", 
           showWarnings = FALSE)

# Bluce para crear un conjunto de isocronas de 0-10 y 10-20 min por cada centroide
for(i in 1:nrow(centroides_dmq)){
  
  isocrona <- isoline(
    poi = centroides_dmq[i,],
    range = seq(10, 20, 10) * 60,
    range_type = "time",
    datetime <- as.POSIXct(paste0(Sys.Date()," 10:00"))
  ) %>%
    mutate(name = paste0((range - 600) / 60," to ", range / 60, " mins"))

  # Guardar poligonos en carpeta isocronas
  dsn <- paste0("../data/shp/isocronas/")
  
  # Asignar un nombre a cada archivo shapefile
  layer <- centroides_dmq$zon[i]
  
  st_write(obj = isocrona,
           dsn = dsn,
           layer = layer,
           driver = "ESRI Shapefile",
           append = TRUE)
 
  # Añadir una pausa de 1 segundo al crear los archivos para prevenir sobrecarga
  pause(1)
}
```

# Sección 2: Crear la matriz de influencia o captación

::: callout-note
## Objetivos de esta sección

1.  Obtener las ubicaciones de los hospitales en el Distrito Metropolitano de Quito (DMQ)
2.  Trazar las ubicaciones de los hospitales sobre las zonas de influencia.
3.  Generar una matriz que identifique en qué subzona está localizada cada hospital para cada zona censal.
:::

## Obtener las ubicaciones de los hospitales en el DMQ

Para obtener las ubicaciones de los hospitales realizamos una consulta a la API de OSM.

```{r}

hospitales_sf <- 
  # Obtenemos la zona de donde queremos consultar
  getbb("Quito Ecuador") %>% 
  
  # Creamos la consulta 
  opq() %>% 
  
  # Especificamos las caracteristicas deseadas de OSM
  add_osm_feature(key = "amenity",
                  value = "hospital") %>% 
  
  # Especificamos el formato de salida de los datos como sf
  osmdata_sf()

# Visualizamos los datos obtenidos 
leaflet() %>% 
  addProviderTiles("CartoDB.Positron", 
                   group = "Greyscale") %>% 
  addPolygons(data = hospitales_sf$osm_polygons[1])

```

Debido a que en algunos casos los puntos obtenidos apuntan a las esquinas de los hospitales vamos a obtener sus centroides.

```{r}

hospitales_centroides <- hospitales_sf$osm_polygons %>%
  # Seleccionamos los nombres de los hospitales asi como su geomtria 
  select(name, geometry) %>% 
  
  # Obtenemos los centroides de los poligonos
  st_centroid() %>% 
  
  # Se omiten las filas sin nombre
  na.omit()

# Visualizamos los hospitales en el DMQ
leaflet() %>% 
  addProviderTiles("CartoDB.Positron", 
                   group = "Greyscale") %>% 
  addCircleMarkers(data = hospitales_centroides)

# Exportamos los centroides obtenidos como shapefile
# st_write(hospitales_centroides, "hospitales.shp")
```

## Trazar las ubicaciones de los hospitales sobre las zonas de influencia (isocronas)

```{r}

# Importamos los hospitales 
hospitales_shp <- st_read("../data/shp/hospitales.shp")

# Importamos un shapefile de ejemplo 
isocrona_ejemplo <- st_read("../data/shp/isocronas/170150001.shp")

# Sobreponemos los hospitales en los poligonos de cada isocrona
interseccion <- st_join(hospitales_shp,
                        isocrona_ejemplo, 
                        # Hacemos una operacion de que nos devuelva un valor logico en lugar de usar una que cree nuevas geometrias como st_intersection() 
                        join = st_within) 
View(interseccion)

```

## Generar la matriz de influencia

```{r}

# Ruta donde se encuentran las isocronas
isocronas_lista <- "../data/shp/isocronas/"

# Ruta completa de cada isocrona
isocrona_ruta <- list.files(path = isocronas_lista,
                              pattern = ".shp",
                              full.names = TRUE)

# Creamos una lista vacia donde guardar nuestra operacion 
lista <- list()

# Iteramos 
for(i in seq_along(isocrona_ruta)){
  
  # Leer el shapefile i dentro de la carpeta isocronas
  shapefile <- st_read(isocrona_ruta[i])
  
  # Guardamos el resultado de la sobreposicion de los hospitales por cada shapefile en la lista 
  lista[[i]] <- st_join(hospitales_shp,
                        shapefile, 
                        join = st_within) %>% 
    
    # Seleccionamos los nombres de los hospitales y rango temporal 
    select(Hospital = name.x, name.y) %>% 
    
    # Nombramos las columnas segun el indice i 
    rename_with(.cols = name.y, 
                .fn = ~paste0(.x, i)) %>% 
    as_tibble()
}

# Combinamos todos los elementos de la lista en un solo data frame usando un left_join
 matriz <- reduce(lista, left_join)

```

# Crear la matriz de ponderaciones o pesos

# Medidas de la oferta y la demanda

# Calcular el Índice de acceso espacial
